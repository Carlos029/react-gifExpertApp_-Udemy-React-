{"version":3,"sources":["Components/AddCategory.js","helpers/getGifs.js","Components/GifGridItem.js","Components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","length","categories","type","value","onChange","target","protoType","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","tittle","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mNAGOA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEFC,mBAAS,IAFP,mBAE/BC,EAF+B,KAEnBC,EAFmB,KAmBtC,OACE,uBAAMC,SAZa,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAS,IACnBP,GAAe,SAAAQ,GAAU,OAAKN,GAAL,mBAAmBM,OAC5CL,EAAc,MAOpB,UACE,6BAAKD,IACL,uBACIO,KAAO,OACPC,MAASR,EACTS,SArBkB,SAACN,GACvBF,EAAcE,EAAEO,OAAOF,cA0B/BX,EAAYc,UAAY,CACpBb,c,OAAgBc,EAAUC,KAAKC,Y,mCCnC7BC,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAENC,EAFM,iDAE2CC,UAAUH,GAFrD,+DAGOI,MAAMF,GAHb,cAGNG,EAHM,gBAISA,EAAKC,OAJd,uBAILC,EAJK,EAILA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAElB,MAAM,CACFC,GAAID,EAAIC,GACRC,OAAQF,EAAIG,MACZX,IAAKQ,EAAII,OAAOC,iBAAiBb,QAX7B,kBAeLM,GAfK,4CAAH,sDCEAQ,EAAc,SAAC,GAAwB,EAAtBL,GAAuB,IAAnBC,EAAkB,EAAlBA,OAAQV,EAAU,EAAVA,IAEtC,OACI,sBAAKe,UAAU,yCAAf,UACI,qBAAKC,IAAKhB,EAAKiB,IAAMP,IACrB,4BAAIA,QCHHQ,EAAU,SAAC,GAAgB,IAAfpB,EAAc,EAAdA,SAAc,ECAlB,SAACA,GAAc,IAAD,EAELjB,mBAAS,CAC/BwB,KAAO,GACPc,SAAU,IAJiB,mBAExBC,EAFwB,KAEjBC,EAFiB,KA2B/B,OApBMC,qBAAW,WACZzB,EAASC,GACRyB,MAAK,SAAAC,GAIHH,EAAS,CACLhB,KAAOmB,EACPL,SAAU,SAMhB,CAACrB,IAMAsB,EDxByBK,CAAa3B,GAAhCc,EAHsB,EAG5BP,KAAcc,EAHc,EAGdA,QAIrB,OAEI,qCAEA,oBAAIJ,UAAU,oCAAd,SAAmDjB,IAElDqB,GAAW,mBAAGJ,UAAU,wCAAb,wBAEV,qBAAKA,UAAU,YAAf,SAOSH,EAAOL,KAAK,SAAAC,GACT,OAAO,cAAC,EAAD,eAEOA,GADGA,EAAIC,aExBrCiB,EAAe,WAAM,IAAD,EAEc7C,mBAAU,CAAC,cAFzB,mBAEfO,EAFe,KAEJR,EAFI,KAWtB,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAGA,6BAGQQ,EAAWmB,KAAI,SAAAT,GACX,OAAO,cAAC,EAAD,CACCA,SAAUA,GACHA,YCtBnC6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.5afc1944.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\n const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault(); // prevenir el comportamiento normal del formulario en donde se actualiza con cada cosa que le ponermos nueva\r\n\r\n        if(inputValue.length > 2){\r\n            setCategories( categories => [inputValue,...categories]);\r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n      <form onSubmit = {handleSubmit}>\r\n        <h1>{inputValue}</h1>\r\n        <input \r\n            type = \"text\"\r\n            value = {inputValue}\r\n            onChange = {handleInputChange}\r\n        />\r\n      </form>\r\n    )\r\n}\r\n\r\nAddCategory.protoType = {\r\n    setCategories : PropTypes.func.isRequired\r\n}\r\n\r\nexport {\r\n    AddCategory\r\n}","const getGifs = async(category) =>{\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=eu1yphoD2tt3yVskm0R01WHKgZx4X61e`; //encodeUri por si lo escirto tiene espacios, para que los concatenen como tiene que se ser [ej: one punch = one+punch]\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n\r\n        return{\r\n            id: img.id,\r\n            tittle: img.title,\r\n            url: img.images.downsized_medium.url\r\n        } \r\n    })\r\n    \r\n    return gifs;\r\n}\r\n\r\nexport {\r\n    getGifs\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( {id, tittle, url} ) => {  //otra forma de enviar y usar un props al enviar un objeto\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src={url} alt={ tittle} ></img>\r\n            <p>{tittle}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState,useEffect} from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    //const [images, setImages] = useState([])\\\r\n    const {data: images ,loading} = useFetchGifs(category);\r\n    //data: images = renombrar la constante\r\n   \r\n\r\n    return (\r\n\r\n        <>\r\n        \r\n        <h3 className=\"animate__animated animate__fadeIn\">{category}</h3> \r\n\r\n        {loading && <p className=\"card animate__animated animate__flash\">Loading...</p> }\r\n\r\n        { <div className=\"card-grid\">\r\n                {\r\n                    //images.map( {id, title} => {\r\n                     //   return <li key = {id}> {tittle} </li>   aqui nada mas estaba enviando un item por cada nombre de la imagen\r\n                  //  } )\r\n\r\n\r\n                   images.map( img => {\r\n                      return <GifGridItem\r\n                                key = {img.id}\r\n                                {...img}  //otra forma de enviar y usar un props para poder usar destructuracion al enviar el objeto\r\n                            />   \r\n                   } )\r\n\r\n                }\r\n        </div> }\r\n        </>\r\n       \r\n    )\r\n}\r\n","import {useEffect, useState} from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nconst useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data : [],\r\n        loading : true\r\n    })\r\n\r\n          useEffect( () => { //useEffect permite ejecutar cieto codigo de fomra condicional \r\n         getGifs (category)\r\n         .then(imgs => {\r\n\r\n           \r\n\r\n            setState({\r\n                data : imgs,\r\n                loading : false\r\n            });\r\n                \r\n            \r\n             \r\n         });\r\n      } , [category]);  //el segundo argumento que se le manda al use Effect es un arreglo [] de dependencias. \r\n                 // si esta vacio se lanza solo 1 vez al momento que se renderiza por 1era vez\r\n                 //cuado cambia el category que esta en el array [], se dispara lo que esta dentro del useEffect\r\n\r\n  \r\n\r\n    return state; //la primera vez que se llama a esta fucion retorna objeto {data:[], loading : true}\r\n\r\n}\r\n\r\nexport {\r\n    useFetchGifs\r\n}","import { useState } from \"react\";\r\nimport { AddCategory } from \"./Components/AddCategory\";\r\nimport { GifGrid } from \"./Components/GifGrid\";\r\n\r\nconst GifExpertApp = ()=> {\r\n\r\n    const [categories,setCategories] =  useState( ['One punch'] );\r\n    \r\n   // const handleAdd = () => {\r\n\r\n        //setCategories([...categories , 'Naruto']);\r\n        //setCategories( categories => [...categories , 'Naruto']);\r\n\r\n    //}\r\n\r\n    return (\r\n      <>\r\n        <h2>GifExpertApp</h2>\r\n        <AddCategory setCategories ={setCategories}/>\r\n        <hr></hr>\r\n\r\n\r\n        <ol>\r\n            \r\n            {\r\n                categories.map(category => {\r\n                    return <GifGrid \r\n                            category={category}\r\n                            key = {category}/> //key = ido forma de identificar el componente\r\n                })\r\n            }\r\n\r\n        </ol>\r\n\r\n      </>\r\n    ) \r\n  \r\n  };\r\n\r\n  export {\r\n    GifExpertApp\r\n  };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from'./GifExpertApp'\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}